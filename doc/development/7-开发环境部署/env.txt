先安装python2.7,pip,virtualenv
pip install virtualenv # 安装 virtualenv
mkdir test # 创建 test 文件夹
cd test # 切换到 test 文件夹
# 使用 virtualenv 工具包通过传入 python2.7 的可执行文件位置来创建名字为 env 的虚拟环境
# 如 virtualenv --python /usr/bin/python2.7 env
# Windows 下可能是 X:\path\to\python27\bin\python.exe
virtualenv --python /path/to/python2.7 env
source ./env/bin/activate # 激活虚拟环境, Windows 可能是env\Script\acitvate.bat,
python -V # 查看版本信息

# 之后通过 pip 安装包时,都要先激活虚拟环境,再安装,确保安装位置在 env 中
pip install django # 默认安装 django-1.11.7,附带安装 pytz-2017.3

django-admin startproject BKOL_MS # 创建 django project,名字暂且叫 BKOL_MS(book online manage system)
cd BKOL_MS
python manage.py startapp backend # 创建 django app

# 安装 node, npm
npm install vue-cli # 安装 vue-cli
vue -V # vue 查看 vue 版本: 2.9.1
vue-init webpack frontend # 创建 vue 项目
一路回车或y
cd frontend
npm install
npm run build

5. 使用Django的通用视图 TemplateView

# 找到项目根 urls.py (即BKOL_MS/urls.py)，使用通用视图创建最简单的模板控制器，访问 『/』时直接返回 index.html
# 以 ** 包围的表示新增的,输入时不用带上两边的 **
from django.views.generic import TemplateView
from django.conf.urls import include
urlpatterns = [
    url(r'^admin/', admin.site.urls),
    **url(r'^$', TemplateView.as_view(template_name="index.html")),**
    # url(r'^api/', include('backend.urls', namespace='api'))
]

6. 配置Django项目的模板搜索路径

上一步使用了Django的模板系统，所以需要配置一下模板使Django知道从哪里找到index.html

# 打开 settings.py (BKOL_MS/settings.py)，找到TEMPLATES配置项，修改如下:
# ** 含义同上,不用加上,这里是注释了 DIRS, 再新增 DIRS,直接新增的先把前面的注释掉或者直接在原来的[]中添加
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [],
        **'DIRS': ['frontend/dist']**,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
注意这里的 frontend 是VueJS项目目录，dist则是运行 npm run build 构建出的index.html与静态文件夹 static 的父级目录

这时启动Django项目，访问 / 则可以访问index.html，但是还有问题，静态文件都是404错误，下一步我们解决这个问题

7. 配置静态文件搜索路径

打开 settings.py (BKOL_MS/settings.py)，找到 STATICFILES_DIRS 配置项(没有则新建)，配置如下:

# Add for vuejs
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "frontend/dist/static"),
]
这样Django不仅可以将/ 映射到index.html，而且还可以顺利找到静态文件

此时访问 / 我们可以看到使用Django作为后端的VueJS helloworld

按照上面的做法,每次修改了前端 vue 的内容后,必须先 npm run build 编译生成所需要的 css,js 之类的静态文件,不适合开发环境,使用 npm run dev 来代替 npm run build,这样每次修改文件后立刻能重新构建前端,但是有个新问题，使用VueJS的开发环境脱离了Django环境，访问Django写的API，出现了跨域问题
8. 代理解决跨域问题
在 /BKOL_MS/frontend 下执行
pip install axios
在 BKOL_MS/frontend/config/index.js 的 /add 要改成/api/*,到时测试再说吧
#dev: {
#    env: require('./dev.env'),
#    port: process.env.PORT || 8080,
#    autoOpenBrowser: true,
#    assetsSubDirectory: 'static',
#    assetsPublicPath: '/',
#    proxyTable: {},
中添加
proxyTable: {
      '/add': {
        target: 'http://127.0.0.1:8000/',
        changeOrigin: true
      }
    },
在BKOL_MS/src/main.js 加上
import Axios from 'axios'
Vue.prototype.$http = Axios

# 以下这步不知道要不要用上,可以先不管
# --- start ---
pip install django-cors-header
and then add it to your installed apps:

INSTALLED_APPS = (
    ...
    'corsheaders',
    ...
)

You will also need to add a middleware class to listen in on responses:

MIDDLEWARE = [  # Or MIDDLEWARE_CLASSES on Django < 1.10
    ...
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    ...
]

# Allow to cross header
CORS_ORIGIN_ALLOW_ALL = True
# --- end ---

npm install element-ui
在BKOL_MS/src/main.js 加上
import ElementUI from 'element-ui'
Vue.use(ElementUI)
...
